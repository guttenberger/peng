AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Prefix:
    Type: String
    Default: peng
  BookPicturesBucketName:
    Type: String
    Default: book-covers
Resources:
  BookPicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Prefix}-${BookPicturesBucketName}-0000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      SamResourceId: BookPicturesBucket
  BookPictures:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-data-0002/c9ef1b93ad6aa75cda91f19ab5c8f03f
      Runtime: nodejs16.x
      Handler: app.handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BookPicturesBucket
      - Statement:
        - Effect: Allow
          Action: s3-object-lambda:WriteGetObjectResponse
          Resource: '*'
    Metadata:
      SamResourceId: BookPictures
  S3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket:
        Ref: BookPicturesBucket
      Name: resize-ap
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      SamResourceId: S3AccessPoint
  S3ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name: resize
      ObjectLambdaConfiguration:
        SupportingAccessPoint:
          Fn::Sub: arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${S3AccessPoint}
        TransformationConfigurations:
        - Actions:
          - GetObject
          ContentTransformation:
            AwsLambda:
              FunctionArn:
                Fn::GetAtt:
                - BookPictures
                - Arn
              FunctionPayload: test-payload
    Metadata:
      SamResourceId: S3ObjectLambdaAccessPoint
  S3ProxyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      BinaryMediaTypes:
      - '*/*'
    Metadata:
      SamResourceId: S3ProxyApi
  S3Proxy:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: ANY
        IntegrationResponses:
        - StatusCode: 200
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:s3:${AWS::AccountId}:accesspoint/${S3ObjectLambdaAccessPoint}
        Credentials:
          Fn::GetAtt:
          - AllowAccessRole
          - Arn
      ResourceId:
        Fn::GetAtt:
        - S3ProxyApi
        - RootResourceId
      RestApiId:
        Ref: S3ProxyApi
    Metadata:
      SamResourceId: S3Proxy
  AllowAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AllowAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: '*'
            Effect: Allow
            Resource:
            - Fn::GetAtt:
              - S3ObjectLambdaAccessPoint
              - Arn
    Metadata:
      SamResourceId: AllowAccessRole
