AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  deploymentEnvironment:
    Type: String
    Default: "test"

Resources:
  #Custom auth filter
  MyAuthFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: auth-function/
      Handler: app.handler
      Runtime: nodejs16.x

  MyAuthApi:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes:
        - image/png
        - image/jpg
        - image/gif
        - image/x-icon
        - application/octet-stream
      StageName: !Ref deploymentEnvironment
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt MyAuthFunction.Arn
            Identity:
              ReauthorizeEvery: 0
              QueryStrings:
                - purpose

  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book-cover/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          BUCKET_NAME: !Ref MyS3Bucket
      Policies: AmazonS3FullAccess
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyAuthApi
            Path: /images
            Method: get

  # Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-images"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket Data Transform
  MyS3ObjectLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data-transformer/
      Runtime: nodejs16.x
      Handler: app.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MyS3Bucket
        - Statement:
          - Effect: Allow
            Action: 's3-object-lambda:WriteGetObjectResponse'
            Resource: '*'

  # S3 Access Point (Network origin: Internet)
  MyS3AccessPoint:
    Type: 'AWS::S3::AccessPoint'
    Properties:
      Bucket: !Ref MyS3Bucket
      Name: !Sub "${AWS::StackName}-support"

  MyS3ObjectLambdaAccessPoint:
    Type: 'AWS::S3ObjectLambda::AccessPoint'
    Properties: 
      Name:  !Sub "${AWS::StackName}-anon"
      ObjectLambdaConfiguration:
        SupportingAccessPoint: !Sub 'arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${MyS3AccessPoint}'
        TransformationConfigurations: 
        - Actions: 
            - GetObject
          ContentTransformation: 
            AwsLambda:
              FunctionArn: !GetAtt MyS3ObjectLambda.Arn
              FunctionPayload: 'test-payload'

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Hello World function"
    Value: !Sub "https://${MyAuthApi}.execute-api.${AWS::Region}.amazonaws.com/${deploymentEnvironment}/image?purpose=testabc"