AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  deploymentEnvironment:
    Type: String
    Default: test
Resources:
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-data-0005/3ba11035573abf48a6b41d724f993399
      Handler: app.handler
      Runtime: nodejs16.x
    Metadata:
      SamResourceId: MyAuthFunction
  MyAuthApi:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes:
      - image/png
      - image/jpg
      - image/gif
      - image/x-icon
      - application/octet-stream
      StageName:
        Ref: deploymentEnvironment
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn:
              Fn::GetAtt:
              - MyAuthFunction
              - Arn
            Identity:
              ReauthorizeEvery: 0
              QueryStrings:
              - purpose
    Metadata:
      SamResourceId: MyAuthApi
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-data-0005/da1ea48a810fcd9f1d33bcefb62c45fc
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: MyS3Bucket
      Policies: AmazonS3FullAccess
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAuthApi
            Path: /images
            Method: get
    Metadata:
      SamResourceId: MyFunction
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      SamResourceId: MyS3Bucket
  MyS3ObjectLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-data-0005/d2100f991b803a8a15524e4e0520f136
      Runtime: nodejs16.x
      Handler: app.handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: MyS3Bucket
      - Statement:
        - Effect: Allow
          Action: s3-object-lambda:WriteGetObjectResponse
          Resource: '*'
    Metadata:
      SamResourceId: MyS3ObjectLambda
  MyS3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket:
        Ref: MyS3Bucket
      Name:
        Fn::Sub: ${AWS::StackName}-support
    Metadata:
      SamResourceId: MyS3AccessPoint
  MyS3ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-anon
      ObjectLambdaConfiguration:
        SupportingAccessPoint:
          Fn::Sub: arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${MyS3AccessPoint}
        TransformationConfigurations:
        - Actions:
          - GetObject
          ContentTransformation:
            AwsLambda:
              FunctionArn:
                Fn::GetAtt:
                - MyS3ObjectLambda
                - Arn
              FunctionPayload: test-payload
    Metadata:
      SamResourceId: MyS3ObjectLambdaAccessPoint
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Hello World function
    Value:
      Fn::Sub: https://${MyAuthApi}.execute-api.${AWS::Region}.amazonaws.com/${deploymentEnvironment}/image?purpose=testabc
