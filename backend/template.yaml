AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 10
    MemorySize: 512
  

Resources:
  # General Api Gateway
  MyS3Api:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub "${AWS::StackName}-temp" 
      StageName: Test
      BinaryMediaTypes:
        - '*/*'

  # Photo service
  PhotoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-data"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  RestApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: healthphotos/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          BUCKET_NAME: !Ref PhotoBucket
      Policies: AmazonS3FullAccess
      Events:
        GetHealthphoto:
          Type: Api
          Properties:
            RestApiId: !Ref MyS3Api
            Path: /healthphotos/{id}
            Method: any
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyS3Api
            Path: /healthphotos/
            Method: get
        PostRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyS3Api
            Path: /healthphotos/
            Method: post

  # Patient service
  PatientTable:
    Type: AWS::Serverless::SimpleTable

  Patient:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: patient/
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref PatientTable
      Policies: AmazonDynamoDBFullAccess
      Events:
        AddPatient:
          Type: Api
          Properties:
            Path: /patients
            Method: post
            RestApiId: !Ref MyS3Api
        ListPatient:
          Type: Api
          Properties:
            Path: /patients
            Method: get
            RestApiId: !Ref MyS3Api
        Patient:
          Type: Api
          Properties:
            Path: /patients/{id}
            Method: any
            RestApiId: !Ref MyS3Api


Outputs:
  HealthPhotoRestApiUrl:
    Description: "Severless REST api for health photos"
    Value: !Sub  "https://${MyS3Api}.execute-api.${AWS::Region}.amazonaws.com/Test/healthphotos/"
  PatientRestApiUrl:
    Description: "Severless REST api for patient data"
    Value: !Sub  "https://${MyS3Api}.execute-api.${AWS::Region}.amazonaws.com/Test/patients/"