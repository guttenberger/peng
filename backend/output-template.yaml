AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 10
    MemorySize: 512
  Api:
    Cors:
      AllowOrigin: '''*'''
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
Resources:
  MyS3Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-temp
      StageName: Test
      Cors:
        AllowOrigin: '''*'''
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
      BinaryMediaTypes:
      - '*/*'
    Metadata:
      SamResourceId: MyS3Api
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-data
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Metadata:
      SamResourceId: PhotoBucket
  RestApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-proto-package/af011f7319763c364060aedcd67287f8
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: PhotoBucket
      Policies: AmazonS3FullAccess
      Events:
        GetHealthphoto:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /healthphotos/{id}
            Method: any
        GetRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /healthphotos/
            Method: get
        PostRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /healthphotos/
            Method: post
    Metadata:
      SamResourceId: RestApi
  PatientTable:
    Type: AWS::Serverless::SimpleTable
    Metadata:
      SamResourceId: PatientTable
  Patient:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-proto-package/41420e69a4414f16b7ac309b5a0b7a4a
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: PatientTable
      Policies: AmazonDynamoDBFullAccess
      Events:
        AddPatient:
          Type: Api
          Properties:
            Path: /patients
            Method: post
            RestApiId:
              Ref: MyS3Api
        ListPatient:
          Type: Api
          Properties:
            Path: /patients
            Method: get
            RestApiId:
              Ref: MyS3Api
        Patient:
          Type: Api
          Properties:
            Path: /patients/{id}
            Method: any
            RestApiId:
              Ref: MyS3Api
    Metadata:
      SamResourceId: Patient
  CsvBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-csv-archive
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Metadata:
      SamResourceId: CsvBucket
  CsvApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-proto-package/37a376b741004296dfda2ebf94083724
      Handler: app.handler
      Runtime: nodejs16.x
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: CsvBucket
      Policies: AmazonS3FullAccess
      Events:
        GetCsvItem:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /csv-archive/{id}
            Method: any
        GetCsvRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /csv-archive/
            Method: get
        PostCsvRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyS3Api
            Path: /csv-archive/
            Method: post
    Metadata:
      SamResourceId: CsvApi
Outputs:
  HealthPhotoRestApiUrl:
    Description: Severless REST api for health photos
    Value:
      Fn::Sub: https://${MyS3Api}.execute-api.${AWS::Region}.amazonaws.com/Test/healthphotos/
  PatientRestApiUrl:
    Description: Severless REST api for patient data
    Value:
      Fn::Sub: https://${MyS3Api}.execute-api.${AWS::Region}.amazonaws.com/Test/csv-archive/
