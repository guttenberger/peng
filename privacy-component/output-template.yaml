AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  deploymentEnvironment:
    Type: String
    Default: test
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 300
    MemorySize: 1024
  Api:
    Cors:
      AllowOrigin: '''*'''
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
Resources:
  Authenticator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-runtime/430ba41e89d7a3462ddf644ae21baa42
      Handler: authenticator.handler
    Metadata:
      SamResourceId: Authenticator
  AuthGateway:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes:
      - '*/*'
      StageName:
        Ref: deploymentEnvironment
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn:
              Fn::GetAtt:
              - Authenticator
              - Arn
            Identity:
              ReauthorizeEvery: 0
              QueryStrings:
              - purposeToken
    Metadata:
      SamResourceId: AuthGateway
  GetObject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-runtime/430ba41e89d7a3462ddf644ae21baa42
      Runtime: python3.8
      Handler: get-object.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: MyS3Bucket
          S3_ACCESS_POINT:
            Fn::GetAtt:
            - MyS3ObjectLambdaAccessPoint
            - Arn
          HTTPS_S3_ACCESS_POINT:
            Fn::Sub: https://${MyS3ObjectLambdaAccessPoint}-${AWS::AccountId}.s3-object-lambda.${AWS::Region}.amazonaws.com
      Policies:
      - AmazonS3FullAccess
      - AWSLambda_FullAccess
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId:
              Ref: AuthGateway
            Path: /objects/{id}
            Method: get
    Metadata:
      SamResourceId: GetObject
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-data
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    Metadata:
      SamResourceId: MyS3Bucket
  MyS3ObjectLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://peng-runtime/430ba41e89d7a3462ddf644ae21baa42
      Handler: anonymizer.handler
      Policies:
      - AmazonS3FullAccess
    Metadata:
      SamResourceId: MyS3ObjectLambda
  MyS3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties:
      Bucket:
        Ref: MyS3Bucket
      Name:
        Fn::Sub: ${AWS::StackName}-support
    Metadata:
      SamResourceId: MyS3AccessPoint
  MyS3ObjectLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-anon
      ObjectLambdaConfiguration:
        SupportingAccessPoint:
          Fn::Sub: arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${MyS3AccessPoint}
        TransformationConfigurations:
        - Actions:
          - GetObject
          ContentTransformation:
            AwsLambda:
              FunctionArn:
                Fn::GetAtt:
                - MyS3ObjectLambda
                - Arn
    Metadata:
      SamResourceId: MyS3ObjectLambdaAccessPoint
Outputs:
  S3ObjectLambda:
    Description: API Gateway endpoint URL for Hello World function
    Value:
      Fn::Sub: https://${MyS3ObjectLambdaAccessPoint}-${AWS::AccountId}.s3-object-lambda.${AWS::Region}.amazonaws.com
  HelloWorldApi:
    Description: API Gateway endpoint URL for Hello World function
    Value:
      Fn::Sub: https://${AuthGateway}.execute-api.${AWS::Region}.amazonaws.com/${deploymentEnvironment}/objects/test.png?accessToken=testabc
