AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  deploymentEnvironment:
    Type: String
    Default: "test"

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 300
    MemorySize: 1024
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'*'"
      AllowHeaders: "'*'"

Resources:
  #Custom auth filter
  Authenticator:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./
      Handler: authenticator.handler

  AuthGateway:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes:
        - '*/*'
      StageName: !Ref deploymentEnvironment
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt Authenticator.Arn
            Identity:
              ReauthorizeEvery: 0
              QueryStrings:
                - purposeToken

  GetObject:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Runtime: python3.8
      # Handler: get-object.handler
      Handler: get-object.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref MyS3Bucket
          S3_ACCESS_POINT: !GetAtt MyS3ObjectLambdaAccessPoint.Arn
      Policies: 
        - AmazonS3FullAccess
        - AWSLambda_FullAccess
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref AuthGateway
            Path: /objects/{id}
            Method: get

  # Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-data"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket Data Transform
  MyS3ObjectLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: anonymizer.handler
      Policies:
        - AmazonS3FullAccess
        # - S3CrudPolicy:
        #     BucketName: !Ref MyS3Bucket
        # - Statement:
        #   - Effect: Allow
        #     Action: 's3-object-lambda:WriteGetObjectResponse'
        #     Resource: '*'

  # S3 Access Point (Network origin: Internet)
  MyS3AccessPoint:
    Type: 'AWS::S3::AccessPoint'
    Properties:
      Bucket: !Ref MyS3Bucket
      Name: !Sub "${AWS::StackName}-support"

  MyS3ObjectLambdaAccessPoint:
    Type: 'AWS::S3ObjectLambda::AccessPoint'
    Properties: 
      Name:  !Sub "${AWS::StackName}-anon"
      ObjectLambdaConfiguration:
        SupportingAccessPoint: !Sub 'arn:aws:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${MyS3AccessPoint}'
        TransformationConfigurations: 
        - Actions: 
            - GetObject
          ContentTransformation: 
            AwsLambda:
              FunctionArn: !GetAtt MyS3ObjectLambda.Arn
              # FunctionPayload: 'test-payload'

Outputs:
  S3ObjectLambda:
    Description: "API Gateway endpoint URL for Hello World function"
    Value: !Sub https://${MyS3ObjectLambdaAccessPoint}-${AWS::AccountId}.s3-object-lambda.${AWS::Region}.amazonaws.com
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Hello World function"
    Value: !Sub "https://${AuthGateway}.execute-api.${AWS::Region}.amazonaws.com/${deploymentEnvironment}/objects/test.png?accessToken=testabc"